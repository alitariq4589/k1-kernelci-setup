setenv ipaddr 192.168.2.5
setenv serverip 192.168.2.2
setenv netmask 255.255.255.0
setenv gatewayip 192.168.2.2

setenv fdt_high 0xffffffffffffffff

setenv rootfs_path /nfsroot/rootfs
setenv bootfs_path /nfsroot/bootfs
setenv rootpath /nfsroot/rootfs

setenv console ttyS0,115200

setenv dtb_name k1-x_deb1_cloud_v.dtb

setenv ramdisk_name initrd.img-6.6.36

setenv knl_name uImage-bianbu

commonargs=setenv bootargs ${console}  earlyprintk quiet splash plymouth.ignore-serial-consoles plymouth.prefer-fbcon clk_ignore_unused swiotlb=65536 workqueue.default_affinity_scope=${workqueue.default_affinity_scope}


setenv get_kernel 'echo "Loading kernel from NFS..."; nfs ${kernel_addr_r} ${serverip}:${bootfs_path}/${knl_name}'

setenv get_dtb 'echo "Loading dtb from NFS..."; nfs ${dtb_addr} ${serverip}:${bootfs_path}/${dtb_name}'

setenv get_ramdisk 'nfs ${ramdisk_addr} ${serverip}:${bootfs_path}/${ramdisk_name}; setenv ramdisk_size ${filesize}; setenv ramdisk_combo ${ramdisk_addr}:${ramdisk_size}'
 

setenv set_boot_args 'setenv bootargs "${bootargs}" root=/dev/nfs nfsroot=${serverip}:${rootfs_path}, ip=eth0:dhcp,nolink noipath'

setenv start_kernel 'fdt addr ${dtb_addr}; if fdt list /; then bootm ${kernel_addr_r} - ${dtb_addr}; else booti ${kernel_addr_r} - ${dtb_addr}; fi;'

setenv nfs_boot 'echo "Try to boot from NFS ..."; run commonargs; run set_boot_args; run get_kernel; run get_dtb; run get_ramdisk; run start_kernel; echo "########### boot kernel failed from NFS, check your boot config #############"' 



fdt addr ${dtb_addr}

run nfs_boot



setenv set_boot_args 'setenv bootargs "${bootargs}" root=/dev/nfs nfsroot=${serverip}:${rootfs_path},nfsvers=3,tcp bootfs=${serverip}:${bootfs_path} rootpath=/nfsroot/rootfs/ ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}::${netdev}:off noipath'

nfs_boot=echo "Try to boot from NFS ..."; run commonargs; setenv bootargs "${bootargs}" root=/dev/nfs nfsroot=${serverip}:${rootfs_path} bootfs=${serverip}:${bootfs_path} ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}::${netdev}:off noipath; echo "bootargs: ${bootargs}"; run detect_dtb; echo "Loading kernel from NFS..."; nfs ${kernel_addr_r} ${serverip}:${bootfs_path}/${knl_name}; echo "Loading dtb from NFS..."; nfs ${dtb_addr} ${serverip}:${bootfs_path}/${dtb_name}; if test -n "${ramdisk_name}"; then echo "Loading ramdisk from NFS..."; nfs ${ramdisk_addr} ${serverip}:${bootfs_path}/${ramdisk_name}; setenv ramdisk_size ${filesize}; setenv ramdisk_combo ${ramdisk_addr}:${ramdisk_size}; else setenv ramdisk_combo -; fi; run start_kernel; echo "########### boot kernel failed from NFS, check your boot config #############"


arch=riscv
autoboot=if test ${boot_device} = nand; then run nand_boot; elif test ${boot_device} = nor; then run nor_boot; elif test ${boot_device} = mmc; then run mmc_boot; elif test ${boot_device} = nfs; then run nfs_boot; fi;
autoload=0
baudrate=115200
board=k1-x
board_name=k1-x
boot_default=echo "Current Boot Device: ${boot_device}"
boot_device=mmc
boot_devnum=0
boot_grub=env set -e -bs product_name "${product_name}"; env set -e -bs bootargs "${bootargs}"; run usb_start; run load_grub; bootefi ${kernel_addr_r};
boot_kernel=run detect_dtb; run loadknl; run loaddtb; run loadramdisk; run start_kernel;
bootargs=earlyprintk quiet splash plymouth.ignore-serial-consoles plymouth.prefer-fbcon clk_ignore_unused swiotlb=65536 workqueue.default_affinity_scope=system root= rootwait rootfstype=ext4
bootcmd=run autoboot; echo "run autoboot"
bootdelay=0
bootmenu_0="-------- Boot Options --------"=run boot_default
bootmenu_1="Boot from Nor"=run nor_boot
bootmenu_2="Boot from Nand"=run nand_boot
bootmenu_3="Boot from MMC"=run mmc_boot
bootmenu_4="Autoboot"=run autoboot
bootmenu_5="Show current Boot Device"=run boot_default
bootmenu_6="-------- Flash Options --------"=run flash_default
bootmenu_7="recovery from usb"=run flash_from_usb
bootmenu_8="recovery from mmc"=run flash_from_mmc
bootmenu_9="recovery from net"=run flash_from_net
bootmenu_delay=5
commonargs=setenv bootargs earlyprintk quiet splash plymouth.ignore-serial-consoles plymouth.prefer-fbcon clk_ignore_unused swiotlb=65536 workqueue.default_affinity_scope=${workqueue.default_affinity_scope}
console=ttyS0,115200
cpu=x60
detect_dtb=echo "product_name: ${product_name}"; run dtb_env; echo "select ${dtb_name} to load";
device_version=1
dtb_addr=0x31000000
dtb_env=if test -n "${product_name}"; then if test "${product_name}" = k1_evb; then setenv dtb_name ${dtb_dir}/k1-x_evb.dtb; elif test "${product_name}" = k1_deb1; then setenv dtb_name ${dtb_dir}/k1-x_deb1.dtb; elif test "${product_name}" = k1_deb2; then setenv dtb_name ${dtb_dir}/k1-x_deb2.dtb; elif test "${product;
dtb_name=k1-x_evb.dtb
earlycon=sbi
eeprom_i2c_index=2
eeprom_pin_group=0
esp_name=ESP
eth1addr=FE:FE:FE:8F:19:E1
ethact=ethernet@cac80000
ethaddr=FE:FE:FE:8F:19:E0
fdt_addr=7f00000
fdtcontroladdr=7de9bc70
flash_default=echo "Returning to Boot Menu..."
flash_from_mmc=echo "recovery from mmc...... " flash_image mmc;
flash_from_net=echo "recovery from net...... " flash_image net;
flash_from_usb=echo "recovery from usb...... "; flash_image usb;
gatewayip=10.0.92.1
get_esp_index=env set esp_index ${bootfs_part}; part number ${bootfs_devname} ${boot_devnum} ${esp_name} esp_index;
get_rootfs_env=part number ${bootfs_devname} ${boot_devnum} rootfs rootfs_part; setexpr rootfs_part ${rootfs_part} + 0; if test ${rootfs_part} > 9 ; then run rootfs_part_to_ul;fi; echo "get rootfs_part index:${rootfs_part}";
grub_file=EFI/BOOT/BOOTRISCV64.EFI
init=/init
ipaddr=10.0.92.253
kernel_addr_r=0x11000000
kernel_comp_addr_r=0x200000
kernel_comp_size=0x10000000
knl_name=Image.itb
load_grub=echo "Loading grub..."; load ${bootfs_devname} ${boot_devnum}:${esp_index} ${kernel_addr_r} ${grub_file}; # bootm command for fit image, booti command for PE or compress PE image
loadaddr=0x200000
loaddtb=echo "Loading dtb..."; if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${dtb_addr} ${dtb_name}; then else echo "load dtb from bootfs fail, use built-in dtb"; setenv dtb_addr ""; fi;
loadknl=echo "Loading kernel..."; load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${kernel_addr_r} ${knl_name};
loadramdisk=echo "Loading ramdisk ..."; if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${ramdisk_addr} ${ramdisk_name}; then size ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${ramdisk_name}; setenv ramdisk_size ${filesize}; setenv ramdisk_combo ${ramdisk_addr}:${ramdisk_size}; else echo "load ramdisk fr;
mac_mapping_file=/home/it/nfs/bianbu/mac_mapping.txt
manufacture_date=01/16/2023 11:02:20
manufacturer=spacemit
mmc_boot=echo "Try to boot from ${bootfs_devname}${boot_devnum} ..."; run commonargs; run set_mmc_root; run set_mmc_args; run get_esp_index; if test -e ${bootfs_devname} ${boot_devnum}:${esp_index} ${grub_file}; then run boot_grub; else run boot_kernel; fi; echo "########### boot failed by default config, check your"
mmc_rootfstype=ext4
mtdids=nor0=d420c000.spi-0
mtdparts=d420c000.spi-0:64K@0(bootinfo),64K@64K(private),256K@128K(fsbl),64K@384K(env),192K@448K(opensbi),-@640K(uboot)
net_data_path=net_flash_file/net_flash_file/
netdev=eth0
netmask=255.255.255.0
nfs_boot=echo "Try to boot from NFS ..."; run commonargs; setenv bootargs "${bootargs}" root=/dev/nfs nfsroot=${serverip}:${rootfs_path} bootfs=${serverip}:${bootfs_path} ip=${ipaddr}:${serverip}:${gatewayip}:${netmask}::${netdev}:off noipath; echo "bootargs: ${bootargs}"; run detect_dtb; echo "Loading kernel from N"
nor_boot=echo "Try to boot from ${bootfs_devname}${boot_devnum} ..."; run commonargs; run set_nor_root; run set_nor_args; run get_esp_index; if test -e ${bootfs_devname} ${boot_devnum}:${esp_index} ${grub_file}; then run boot_grub; else run boot_kernel; fi; echo "########### boot failed by default config, check your"
nor_root=/dev/mtdblock6
nor_rootfstype=squashfs
phy_link_time=10000
phyaddr0=1
pmic_type=0
product_name=k1-x_deb1
pxefile_addr_r=0x0c200000
ram_size=mem=16384MB
ramdisk_addr=0x21000000
ramdisk_combo=-
ramdisk_name=initramfs-generic.img
ramdisk_size=-
rootfs_part_to_ul=echo "set rootfs_part to ul"; setexpr temp_num_0 ${rootfs_part} / a; setexpr temp_num_1 ${rootfs_part} % a; setenv rootfs_part ${temp_num_0}${temp_num_1};
scriptaddr=0x2c100000
sdk_version=1
serial#=0123456789ABCDEF
serverip=10.0.92.148
set_mmc_args=setenv bootargs "${bootargs}" root=${blk_root} rootwait rootfstype=${mmc_rootfstype};
set_mmc_root=run get_rootfs_env; run set_rootfs_env;
set_nor_args=setenv bootargs "${bootargs}" mtdparts=${mtdparts} root=${blk_root} rootfstype=ext4
set_nor_root=run get_rootfs_env; run set_rootfs_env;
set_rootfs_env=if test "${bootfs_devname}" = mmc; then setenv blk_root "/dev/mmcblk${boot_devnum}p${rootfs_part}"; elif test "${bootfs_devname}" = nvme; then setenv blk_root "/dev/nvme${boot_devnum}n1p${rootfs_part}"; else echo "not define rootfs part at this blk device, add to env"; fi;
splashfile=bianbu.bmp
splashimage=0x11000000
splashpos=m,m
splashsource=mmc_fs
start_kernel=fdt addr ${kernel_addr_r}; if fdt list /; then bootm ${kernel_addr_r} ${ramdisk_combo} ${dtb_addr}; else booti ${kernel_addr_r} ${ramdisk_combo} ${dtb_addr}; fi;
stderr=serial
stdin=serial,usbkbd,usbkbd1
stdout=serial
stdout_flash=serial,vidconsole
uboot_status=IN_UBOOT
usb_start=true
vendor=spacemit
workqueue.default_affinity_scope=system
